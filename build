#!/usr/bin/env bash
# vim: ft=sh

declare help="
Build Script for Alpine's docker images.

Usage:
  build test
  build commit
  build push
  build [path/to/options] [path/to/other/options]
  build --version
  build -h | --help

Options:
  -h --help               Show this screen.
  --version               Show versions.

Example of build:
  build versions/myprefix-*/options

Examples of tests:
  build version/myprefix-*/options

How should the tests be named:
Use the tag of the resulting docker image, so if the tag is foo/bar:1.0 the
test file should be called test_foo_bar-1.0.bats inside the test directory.

By default it will build all the available files on the `versions-$(uname -m)`
directory.
"

declare version="
Version: 0.1.0.
Licensed under the BSD terms.
"

declare ARCH="$(uname -m)"
declare BUILDER_DIR="${BUILDER_DIR:-builder-$ARCH}"
declare BUILD_IMAGE="${BUILD_IMAGE:-alpine-builder-$ARCH}"
declare BUILD_PREFIX="${BUILD_PREFIX:-alpine-build-$ARCH-}"
declare OPTIONS="${OPTIONS:-versions-$ARCH/**/options}"

build() {
	declare build_files="${*:-$OPTIONS}"
	: "${build_files:?}"

	docker build -t "$BUILD_IMAGE" "$BUILDER_DIR"

	for file in $build_files; do
		( source "$file"
		local release="$RELEASE"
		local build="${BUILD_PREFIX}${release}"
		local build_options="$BUILD_OPTIONS"
		local version_dir="$(dirname "$file")"
		local tags="$TAGS"

		: "${build:?}" "${tags:?}" "${build_options:?}" "${release:?}"

		docker rm "$build" 2>/dev/null || true

		docker run --name "${build}" "$BUILD_IMAGE" $build_options \
			> "./$version_dir/rootfs.tar.gz"

		for tag in $tags; do
			docker build -t "$tag" "$version_dir"
			if [[ "$CIRCLE_BUILD_NUM" ]]; then
				mkdir -p images \
				&& docker tag -f "$tag" "${tag}-${CIRCLE_BUILD_NUM}" \
				&& docker save "${tag}-${CIRCLE_BUILD_NUM}" \
					| gzip -c > "images/${tag//\//_}-${CIRCLE_BUILD_NUM}.tar.gz" \
				&& docker rmi "${tag}-${CIRCLE_BUILD_NUM}" || true
			fi
		done
		docker rm "$build" 2>/dev/null || true )
	done
}

commit() {
	declare rootfs_files="${*:-versions/**/rootfs.tar.gz}"
	local build_num="${CIRCLE_BUILD_NUM:-nobuild}"
	local current_branch
	current_branch=$(git rev-parse --abbrev-ref HEAD)

	for file in $rootfs_files; do
		local release version_dir
		release="$(basename "$(dirname "$file")")"
		version_dir="$(dirname "$file")"

		: "${release:?}" "${current_branch:?}"

		git checkout -B "rootfs-$release"
		git add -f -- "$file"
		git commit -m "pushing release $release for build $build_num"
		git push -f origin "rootfs-$release"
		git checkout "$current_branch"
	done
}

run_tests() {
	declare build_files="${*:-$OPTIONS}"
	declare -a test_files
	for file in $build_files; do
		source "$file"
		local tag
		tag="$(echo "$TAGS" | cut -d' ' -f1)"
		tag="${tag//:/-}"
		tag="${tag//\//_}"
		test_files+=("test/test_${tag}.bats")
	done
	bats "${test_files[@]}"
}

push() {
	declare build_files="${*:-$OPTIONS}"
	for file in $build_files; do
		( source "$file"
		for tag in $TAGS; do
			if docker history $tag &> /dev/null; then
				[[ $PUSH_IMAGE ]] && docker push $tag
			fi
		done
		exit 0 )
	done
}

version() {
  echo "$version"
}

help() {
  echo "$help"
}

main() {
	set -eo pipefail; [[ "$TRACE" ]] && set -x
	declare cmd="$1"
	case "$cmd" in
		test)	        shift; run_tests "$@";;
		commit)	      shift; commit "$@";;
		push)	        shift; push "$@";;
		-h|--help)    shift; help "$@";;
    --version)    shift; version;;
    *)            build "$@";;
	esac
}

main "$@"
